AWSTemplateFormatVersion: '2010-09-09'
Description: Automatically update SecurityGroups to limit access from CloudFront Edges
  only
Parameters:
  Regions:
    Default: us-east-1
    Description: Region to search for SecurityGroups, separated by ","
    Type: String
Resources:
  CustomResourceExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sns:ListSubscriptions
            - sns:Subscribe
            - sns:Unsubscribe
            Effect: Allow
            Resource:
            - '*'
          Version: '2012-10-17'
        PolicyName: AllowModifySecurityGroup
    Type: AWS::IAM::Role
  CustomResourceFunction:
    Properties:
      Code:
        ZipFile: "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\nfrom\t__future__\t\
          import\tprint_function\nprint('Loading function')\nimport\tboto3\nimport\t\
          logging\nimport\tcfnresponse\ndef\tlambda_handler(event,context):\n\tprint('REQUEST\
          \ RECEIVED: ',event)\n\tresponse_data={}\n\tarn=None\n\ttry:\n\t\tif\tevent['RequestType']in['Delete','Update']:\n\
          \t\t\tsns=boto3.client('sns')\n\t\t\tsns.unsubscribe(SubscriptionArn=event['PhysicalResourceId'])\n\
          \t\tif\tevent['RequestType']in['Create','Update']:\n\t\t\tsns=boto3.client('sns')\n\
          \t\t\tret=sns.subscribe(TopicArn=event['ResourceProperties']['TopicArn'],Protocol=event['ResourceProperties']['Protocol'],Endpoint=event['ResourceProperties']['Endpoint'])\n\
          \t\t\tarn=ret['SubscriptionArn']\n\t\tcfnresponse.send(event,context,cfnresponse.SUCCESS,response_data,arn)\n\
          \texcept\tException\tas\te:\n\t\tlogging.exception(e)\n\t\tresponse_data={'exception':repr(e)}\n\
          \t\tcfnresponse.send(event,context,cfnresponse.FAILED,response_data)\n"
      Description: Lambda backed custom resource
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'CustomResourceExecutionRole.Arn'
      Runtime: python2.7
      Timeout: '60'
    Type: AWS::Lambda::Function
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeSecurityGroups
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:RevokeSecurityGroupIngress
            Effect: Allow
            Resource:
            - '*'
          Version: '2012-10-17'
        PolicyName: AllowModifySecurityGroup
    Type: AWS::IAM::Role
  LambdaPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'UpdateSecurityGroups'
      Principal: sns.amazonaws.com
      SourceArn: arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged
    Type: AWS::Lambda::Permission
  SNSSubscription:
    Properties:
      Endpoint: !GetAtt 'UpdateSecurityGroups.Arn'
      Protocol: lambda
      ServiceToken: !GetAtt 'CustomResourceFunction.Arn'
      StackName: !Ref 'AWS::StackName'
      TopicArn: arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged
    Type: Custom::SNSSubscription
  UpdateSecurityGroups:
    Properties:
      Code:
        ZipFile: "import\tboto3\nimport\thashlib\nimport\tjson\nimport\tos\nimport\t\
          urllib2\nSERVICE=\"CLOUDFRONT\"\nINGRESS_PORTS={'Http':80,'Https':443}\n\
          HTTP_SG_TAG={'Name':'cloudfront','AutoUpdate':'true','Protocol':'http'}\n\
          HTTPS_SG_TAG={'Name':'cloudfront','AutoUpdate':'true','Protocol':'https'}\n\
          def\tlambda_handler(event,context):\n\tmessage=json.loads(event['Records'][0]['Sns']['Message'])\n\
          \tip_ranges=json.loads(get_ip_groups_json(message['url'],message['md5']))\n\
          \tcf_ranges=get_ranges_for_service(ip_ranges,SERVICE)\n\tfor\tregion\tin\t\
          os.getenv('REGIONS','us-east-1').split(','):\n\t\tresult=update_security_groups(cf_ranges,region.strip())\n\
          \treturn\tresult\ndef\tget_ip_groups_json(url,expected_hash):\n\tresponse=urllib2.urlopen(url)\n\
          \tip_json=response.read()\n\tm=hashlib.md5()\n\tm.update(ip_json)\n\thash=m.hexdigest()\n\
          \tif\thash!=expected_hash:\n\t\traise\tException('MD5 mismatch, expected\
          \ %s got %s.'%(expected_hash,hash))\n\treturn\tip_json\ndef\tget_ranges_for_service(ranges,service):\n\
          \tservice_ranges=list()\n\tfor\tprefix\tin\tranges['prefixes']:\n\t\tif\t\
          prefix['service']==service:\n\t\t\tservice_ranges.append(prefix['ip_prefix'])\n\
          \treturn\tservice_ranges\ndef\tupdate_security_groups(new_ranges,region):\n\
          \tclient=boto3.client('ec2',region_name=region)\n\tprint('Region: %s'%region)\n\
          \thttp_group=get_sg_for_update(client,HTTP_SG_TAG)\n\thttps_group=get_sg_for_update(client,HTTPS_SG_TAG)\n\
          \tprint('Found %d Http SG to update'%len(http_group))\n\tprint('Found %d\
          \ Https SG to update'%len(https_group))\n\tresult=list()\n\thttp_updated=0\n\
          \thttps_updated=0\n\tfor\tgroup\tin\thttp_group:\n\t\tif\tupdate_security_group(client,group,new_ranges,INGRESS_PORTS['Http']):\n\
          \t\t\thttp_updated+=1\n\t\t\tresult.append('Updated '+group['GroupId'])\n\
          \tfor\tgroup\tin\thttps_group:\n\t\tif\tupdate_security_group(client,group,new_ranges,INGRESS_PORTS['Https']):\n\
          \t\t\thttps_updated+=1\n\t\t\tresult.append('Updated '+group['GroupId'])\n\
          \tresult.append('Updated %s of %s HTTP'%(http_updated,len(http_group)))\n\
          \tresult.append('Updated %s of %s HTTPS'%(https_updated,len(https_group)))\n\
          \treturn\tresult\ndef\tupdate_security_group(client,group,new_ranges,port):\n\
          \tadded=0\n\tremoved=0\n\tif\tlen(group['IpPermissions'])>0:\n\t\tfor\t\
          permission\tin\tgroup['IpPermissions']:\n\t\t\tif\tpermission['FromPort']<=port\t\
          and\tpermission['ToPort']>=port:\n\t\t\t\told_prefixes=list()\n\t\t\t\t\
          to_revoke=list()\n\t\t\t\tto_add=list()\n\t\t\t\tfor\trange\tin\tpermission['IpRanges']:\n\
          \t\t\t\t\tcidr=range['CidrIp']\n\t\t\t\t\told_prefixes.append(cidr)\n\t\t\
          \t\t\tif\tnew_ranges.count(cidr)==0:\n\t\t\t\t\t\tto_revoke.append(range)\n\
          \t\t\t\tfor\trange\tin\tnew_ranges:\n\t\t\t\t\tif\told_prefixes.count(range)==0:\n\
          \t\t\t\t\t\tto_add.append({'CidrIp':range})\n\t\t\t\tremoved+=revoke_permissions(client,group,permission,to_revoke)\n\
          \t\t\t\tadded+=add_permissions(client,group,permission,to_add)\n\telse:\n\
          \t\tto_add=list()\n\t\tfor\trange\tin\tnew_ranges:\n\t\t\tto_add.append({'CidrIp':range})\n\
          \t\tpermission={'ToPort':port,'FromPort':port,'IpProtocol':'tcp'}\n\t\t\
          added+=add_permissions(client,group,permission,to_add)\n\tprint('')\n\t\
          print(group['GroupId']+\": Added \"+str(added)+\", Revoked \"+str(removed))\n\
          \treturn(added>0\tor\tremoved>0)\ndef\trevoke_permissions(client,group,permission,to_revoke):\n\
          \tif\tlen(to_revoke)>0:\n\t\trevoke_params={'ToPort':permission['ToPort'],'FromPort':permission['FromPort'],'IpRanges':to_revoke,'IpProtocol':permission['IpProtocol']}\n\
          \t\tclient.revoke_security_group_ingress(GroupId=group['GroupId'],IpPermissions=[revoke_params])\n\
          \treturn\tlen(to_revoke)\ndef\tadd_permissions(client,group,permission,to_add):\n\
          \tif\tlen(to_add)>0:\n\t\tadd_params={'ToPort':permission['ToPort'],'FromPort':permission['FromPort'],'IpRanges':to_add,'IpProtocol':permission['IpProtocol']}\n\
          \t\tclient.authorize_security_group_ingress(GroupId=group['GroupId'],IpPermissions=[add_params])\n\
          \treturn\tlen(to_add)\ndef\tget_sg_for_update(client,security_group_tag):\n\
          \tfilters=list()\n\tfor\tkey,value\tin\tsecurity_group_tag.iteritems():\n\
          \t\tfilters.extend([{'Name':\"tag-key\",'Values':[key]},{'Name':\"tag-value\"\
          ,'Values':[value]}])\n\tresponse=client.describe_security_groups(Filters=filters)\n\
          \treturn\tresponse['SecurityGroups']\n"
      Description: Update Beanstalk Environment SecurityGroup
      Environment:
        Variables:
          REGIONS: !Ref 'Regions'
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python2.7
      Timeout: '300'
    Type: AWS::Lambda::Function
