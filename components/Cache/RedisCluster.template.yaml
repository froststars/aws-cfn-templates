{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "CreateSecurityGroupCondition": {
      "Fn::Equals": [
        {
          "Ref": "SecurityGroup"
        },
        ""
      ]
    }
  },
  "Description": "Simple Elasticache Redis Cluster",
  "Outputs": {
    "EndpointAddress": {
      "Description": "The DNS address of the configuration endpoint for the Redis cache cluster.",
      "Value": {
        "Fn::GetAtt": [
          "CacheCluster",
          "RedisEndpoint.Address"
        ]
      }
    },
    "EndpointPort": {
      "Description": "The port number of the configuration port for the Redis cache cluster.",
      "Value": {
        "Fn::GetAtt": [
          "CacheCluster",
          "RedisEndpoint.Port"
        ]
      }
    }
  },
  "Parameters": {
    "CacheNodeNum": {
      "Default": 1,
      "Description": "The number of cache nodes that the cache cluster should have.",
      "MaxValue": 16,
      "MinValue": 1,
      "Type": "Number"
    },
    "CacheNodeType": {
      "AllowedValues": [
        "cache.m3.2xlarge",
        "cache.m3.large",
        "cache.m3.medium",
        "cache.m3.xlarge",
        "cache.m4.10xlarge",
        "cache.m4.2xlarge",
        "cache.m4.4xlarge",
        "cache.m4.large",
        "cache.m4.xlarge",
        "cache.r3.2xlarge",
        "cache.r3.4xlarge",
        "cache.r3.8xlarge",
        "cache.r3.large",
        "cache.r3.xlarge",
        "cache.t2.medium",
        "cache.t2.micro",
        "cache.t2.small"
      ],
      "ConstraintDescription": "must be a valid cache node type.",
      "Default": "cache.t2.micro",
      "Description": "Cache node instance type",
      "Type": "String"
    },
    "ClientLocation": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "Lockdown cache access (default can be accessed from anywhere)",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "SecurityGroup": {
      "Default": "",
      "Description": "Cache security group id, a new security group will be created if this is left empty.",
      "Type": "String"
    },
    "SubnetIds": {
      "Description": "SubnetIds of existing subnets of the VPC",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "VpcId": {
      "ConstraintDescription": "must be an existing vpc id.",
      "Description": "VpcId of an existing VPC",
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Resources": {
    "CacheCluster": {
      "Properties": {
        "AutoMinorVersionUpgrade": "true",
        "CacheNodeType": {
          "Ref": "CacheNodeType"
        },
        "Engine": "redis",
        "NumCacheNodes": {
          "Ref": "CacheNodeNum"
        },
        "VpcSecurityGroupIds": [
          {
            "Fn::If": [
              "CreateSecurityGroupCondition",
              {
                "Ref": "CacheSecurityGroup"
              },
              {
                "Ref": "SecurityGroup"
              }
            ]
          }
        ]
      },
      "Type": "AWS::ElastiCache::CacheCluster"
    },
    "CacheSecurityGroup": {
      "Condition": "CreateSecurityGroupCondition",
      "Properties": {
        "GroupDescription": "Enable cache access",
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Ref": "ClientLocation"
            },
            "FromPort": "6379",
            "IpProtocol": "tcp",
            "ToPort": "6379"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "CacheSubnetGroup": {
      "Properties": {
        "Description": "Cache subnet group",
        "SubnetIds": {
          "Ref": "SubnetIds"
        }
      },
      "Type": "AWS::ElastiCache::SubnetGroup"
    }
  }
}