AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  3AZCondition: !Or [!Equals [!Ref 'NumberOfAZs', '3'], {Condition: 4AZCondition}]
  4AZCondition: !Equals [!Ref 'NumberOfAZs', '4']
Description: VPC with specified number of public subnets
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Availability Zone Configuration
      Parameters:
      - NumberOfAZs
      - AvailabilityZones
    - Label:
        default: Network Configuration
      Parameters:
      - VpcCidr
      - PublicSubnetCidrs
    - Label:
        default: Subnet Configuration
      Parameters:
      - AutoAssignPublicIp
    ParameterLabels:
      AutoAssignPublicIp:
        default: Auto Assign Public IP
      AvailabilityZones:
        default: Availability Zones
      NumberOfAZs:
        default: Number of Availability Zones
      PublicSubnetCidrs:
        default: Public Subnet CIDRs
      VpcCidr:
        default: VPC CIDR
Outputs:
  PublicSubnet1Az:
    Description: Public subnet 1 availability zone
    Value: !GetAtt 'PublicSubnet1.AvailabilityZone'
  PublicSubnet1Cidr:
    Description: Public subnet 1 CIDR
    Value: !Select [0, !Ref 'PublicSubnetCidrs']
  PublicSubnet1Id:
    Description: Public subnet 1 ID
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1Id'
    Value: !Ref 'PublicSubnet1'
  PublicSubnet2Az:
    Description: Public subnet 2 availability zone
    Value: !GetAtt 'PublicSubnet2.AvailabilityZone'
  PublicSubnet2Cidr:
    Description: Public subnet 2 CIDR
    Value: !Select [1, !Ref 'PublicSubnetCidrs']
  PublicSubnet2Id:
    Description: Public subnet 2 ID
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2Id'
    Value: !Ref 'PublicSubnet2'
  PublicSubnet3Az:
    Condition: 3AZCondition
    Description: Public subnet 3 availability zone
    Value: !GetAtt 'PublicSubnet3.AvailabilityZone'
  PublicSubnet3Cidr:
    Condition: 3AZCondition
    Description: Public subnet 3 CIDR
    Value: !Select [2, !Ref 'PublicSubnetCidrs']
  PublicSubnet3Id:
    Condition: 3AZCondition
    Description: Public subnet 3 ID
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3Id'
    Value: !Ref 'PublicSubnet3'
  PublicSubnet4Az:
    Condition: 4AZCondition
    Description: Public subnet 4 availability zone
    Value: !GetAtt 'PublicSubnet4.AvailabilityZone'
  PublicSubnet4Cidr:
    Condition: 4AZCondition
    Description: Public subnet 4 CIDR
    Value: !Select [3, !Ref 'PublicSubnetCidrs']
  PublicSubnet4Id:
    Condition: 4AZCondition
    Description: Public subnet 4 ID
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet4Id'
    Value: !Ref 'PublicSubnet4'
  VpcCidr:
    Description: VPC CIDR
    Value: !GetAtt 'VPC.CidrBlock'
  VpcId:
    Description: VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
    Value: !Ref 'VPC'
Parameters:
  AutoAssignPublicIp:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
    Description: Automatically assign instance with a Public IP.
    Type: String
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC.Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
    - '2'
    - '3'
    - '4'
    Default: '2'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  PublicSubnetCidrs:
    Default: 10.0.128.0/20, 10.0.144.0/20, 10.0.160.0/20, 10.0.176.0/20
    Description: Comma-delimited list of public subnet CIDR blocks.
    Type: CommaDelimitedList
  VpcCidr:
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
Resources:
  DHCPOptions:
    Properties:
      DomainNameServers:
      - AmazonProvidedDNS
    Type: AWS::EC2::DHCPOptions
  InternetGateway:
    Properties:
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'
    Type: AWS::EC2::InternetGateway
  PublicSubnet1:
    Properties:
      AvailabilityZone: !Select [0, !Ref 'AvailabilityZones']
      CidrBlock: !Select [0, !Ref 'PublicSubnetCidrs']
      MapPublicIpOnLaunch: !Ref 'AutoAssignPublicIp'
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} Public Subnet 1'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet1ACLAssociation:
    Properties:
      NetworkAclId: !Ref 'PublicSubnetACL'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone: !Select [1, !Ref 'AvailabilityZones']
      CidrBlock: !Select [1, !Ref 'PublicSubnetCidrs']
      MapPublicIpOnLaunch: !Ref 'AutoAssignPublicIp'
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} Public Subnet 2'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet2ACLAssociation:
    Properties:
      NetworkAclId: !Ref 'PublicSubnetACL'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PublicSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet3:
    Condition: 3AZCondition
    Properties:
      AvailabilityZone: !Select [2, !Ref 'AvailabilityZones']
      CidrBlock: !Select [2, !Ref 'PublicSubnetCidrs']
      MapPublicIpOnLaunch: !Ref 'AutoAssignPublicIp'
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} Public Subnet 3'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet3ACLAssociation:
    Condition: 3AZCondition
    Properties:
      NetworkAclId: !Ref 'PublicSubnetACL'
      SubnetId: !Ref 'PublicSubnet3'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PublicSubnet3RouteTableAssociation:
    Condition: 3AZCondition
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnet3'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet4:
    Condition: 4AZCondition
    Properties:
      AvailabilityZone: !Select [3, !Ref 'AvailabilityZones']
      CidrBlock: !Select [3, !Ref 'PublicSubnetCidrs']
      MapPublicIpOnLaunch: !Ref 'AutoAssignPublicIp'
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} Public Subnet 4'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet4ACLAssociation:
    Condition: 4AZCondition
    Properties:
      NetworkAclId: !Ref 'PublicSubnetACL'
      SubnetId: !Ref 'PublicSubnet4'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PublicSubnet4RouteTableAssociation:
    Condition: 4AZCondition
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnet4'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetACL:
    Properties:
      Tags:
      - Key: Name
        Value: PublicSubnetACL
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::NetworkAcl
  PublicSubnetACLEgress:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref 'PublicSubnetACL'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PublicSubnetACLIngress:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref 'PublicSubnetACL'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PublicSubnetRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
    Type: AWS::EC2::Route
  PublicSubnetRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value: PublicSubnetRouteTable
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  VPC:
    Properties:
      CidrBlock: !Ref 'VpcCidr'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'
    Type: AWS::EC2::VPC
  VPCDHCPOptionsAssociation:
    Properties:
      DhcpOptionsId: !Ref 'DHCPOptions'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCDHCPOptionsAssociation
  VPCGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
