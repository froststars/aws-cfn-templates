{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BucketNotificationEnabled": {
      "Fn::Equals": [
        {
          "Ref": "BucketNotification"
        },
        "02 - Enabled"
      ]
    }
  },
  "Description": "Extract compressed files in one bucket into another bucket using s3 events and lambda function",
  "Outputs": {
    "DestinationBucketName": {
      "Description": "S3 bucket",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DestinationBucketName"
        }
      },
      "Value": {
        "Ref": "DestinationBucket"
      }
    },
    "SourceBucketName": {
      "Description": "S3 bucket",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SourceBucketName"
        }
      },
      "Value": {
        "Ref": "SourceBucket"
      }
    }
  },
  "Parameters": {
    "BucketNotification": {
      "AllowedValues": [
        "01 - Disabled",
        "02 - Enabled"
      ],
      "Default": "01 - Disabled",
      "Description": "Enable bucket notification configuration, set this to disable when creating the stack then enable and update the stack.  This is required to break the circular resource dependency of S3 bucket and lambda permission.",
      "Type": "String"
    }
  },
  "Resources": {
    "DestinationBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "LambdaExecutionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "SourceBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "AllowReadSrcBucket"
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:ListMultipartUploadParts",
                    "s3:AbortMultipartUpload"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "DestinationBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "AllowWriteDstBucket"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "LambdaFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "from\t__future__\timport\tprint_function\n__author__='kotaimen'\n__date__='24/05/2017'\nimport\turllib\nimport\tzipfile\nimport\tgzip\nimport\tos\nimport\tio\nimport\tboto3,boto3.s3.transfer\ndef\tlambda_handler(event,context):\n\tsrc_bucket=event['Records'][0]['s3']['bucket']['name']\n\tsrc_key=urllib.unquote_plus(event['Records'][0]['s3']['object']['key'].encode('utf8'))\n\tdst_bucket=os.getenv('DST_BUCKET',src_bucket)\n\tif\tsrc_key.lower().endswith('.zip'):\n\t\tdst_prefix=os.getenv('DST_PREFIX',src_key[:-4]+'/')\n\t\tzip_extract(src_bucket,src_key,dst_bucket,dst_prefix)\n\telif\tsrc_key.lower().endswith('.gz'):\n\t\tdst_prefix=os.getenv('DST_PREFIX',src_key[:-3])\n\t\tgzip_extract(src_bucket,src_key,dst_bucket,dst_prefix)\n\telse:\n\t\traise\tRuntimeError('Unsupported file.')\ndef\tzip_extract(src_bucket,src_key,dst_bucket,dst_prefix):\n\ts3=boto3.client('s3')\n\twith\tio.BytesIO()as\tfp:\n\t\tprint('Downloading {}/{}'.format(src_bucket,src_key))\n\t\ts3.download_fileobj(src_bucket,src_key,fp)\n\t\tzip_file=zipfile.ZipFile(fp,mode='r')\n\t\tfor\tzip_info\tin\tzip_file.filelist:\n\t\t\tif\tzip_info.filename.endswith('/'):\n\t\t\t\tcontinue\n\t\t\tdst_key='{}{}'.format(dst_prefix,zip_info.filename)\n\t\t\tprint('Uploading {0.filename} to {1}/{2} ({0.file_size} bytes)'.format(zip_info,dst_bucket,dst_key))\n\t\t\twith\tzip_file.open(zip_info)as\tdecompressed_file:\n\t\t\t\ts3.upload_fileobj(decompressed_file,dst_bucket,dst_key)\ndef\tgzip_extract(src_bucket,src_key,dst_bucket,dst_prefix):\n\ts3=boto3.client('s3')\n\twith\tio.BytesIO()as\tfp:\n\t\tprint('Downloading {}/{}'.format(src_bucket,src_key))\n\t\ts3.download_fileobj(src_bucket,src_key,fp)\n\t\tfp.seek(0)\n\t\tdst_key=dst_prefix\n\t\twith\tgzip.GzipFile(fileobj=fp,mode='rb')as\tgzip_file:\n\t\t\tbuf=gzip_file.read()\n\t\t\tprint('Uploading to {}/{} ({} bytes)'.format(dst_bucket,dst_prefix,len(buf)))\n\t\t\ts3.put_object(Bucket=dst_bucket,Key=dst_key,Body=buf)\n"
        },
        "Description": "Extract zip file contents to S3",
        "Environment": {
          "Variables": {
            "DST_BUCKET": {
              "Ref": "DestinationBucket"
            }
          }
        },
        "FunctionName": "s3-extract-function-500a1c06e4d42a6e61f8fc1d9fe19148",
        "Handler": "index.lambda_handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "120"
      },
      "Type": "AWS::Lambda::Function"
    },
    "LambdaPermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Fn::Sub": "${AWS::AccountId}"
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:s3:::",
              {
                "Ref": "SourceBucket"
              }
            ]
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "SourceBucket": {
      "Properties": {
        "NotificationConfiguration": {
          "Fn::If": [
            "BucketNotificationEnabled",
            {
              "LambdaConfigurations": [
                {
                  "Event": "s3:ObjectCreated:*",
                  "Filter": {
                    "S3Key": {
                      "Rules": [
                        {
                          "Name": "prefix",
                          "Value": ""
                        },
                        {
                          "Name": "suffix",
                          "Value": ".zip"
                        }
                      ]
                    }
                  },
                  "Function": {
                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:s3-extract-function-500a1c06e4d42a6e61f8fc1d9fe19148"
                  }
                },
                {
                  "Event": "s3:ObjectCreated:*",
                  "Filter": {
                    "S3Key": {
                      "Rules": [
                        {
                          "Name": "prefix",
                          "Value": ""
                        },
                        {
                          "Name": "suffix",
                          "Value": ".gz"
                        }
                      ]
                    }
                  },
                  "Function": {
                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:s3-extract-function-500a1c06e4d42a6e61f8fc1d9fe19148"
                  }
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      },
      "Type": "AWS::S3::Bucket"
    }
  }
}