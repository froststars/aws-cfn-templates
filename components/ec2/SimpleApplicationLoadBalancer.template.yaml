AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  EnableAccessLogsCondition: !Not
    - !Equals
      - !Ref 'BucketName'
      - ''
Description: Application Load Balancer with single instance as target
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - SubnetIds
          - AvailableZones
      - Label:
          default: LoadBalancer Configuration
        Parameters:
          - LbScheme
          - InstanceId
          - CertificateArn
          - LogBucket
          - LogPrefix
    ParameterLabels:
      AvailableZones:
        default: Available Zones
      CertificateArn:
        default: Certificate Arn
      InstanceId:
        default: Instance Id
      LbScheme:
        default: Lb Scheme
      LogBucket:
        default: Log Bucket
      LogPrefix:
        default: Log Prefix
      SubnetIds:
        default: Subnet Ids
      VpcId:
        default: Vpc Id
Outputs:
  CanonicalHostedZoneID:
    Description: Hosted zone ID of the Application load balancer
    Value: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
  DNSName:
    Description: ' DNS name for the Application load balancer'
    Value: !GetAtt 'LoadBalancer.DNSName'
  LoadBalancerFullName:
    Description: The full name of the Application load balancer
    Value: !GetAtt 'LoadBalancer.LoadBalancerFullName'
  LoadBalancerName:
    Description: The name of the Application load balancer
    Value: !GetAtt 'LoadBalancer.LoadBalancerName'
  SecurityGroups:
    Description: The IDs of the security groups for the Application load balancer
    Value: !Select
      - 0
      - !GetAtt 'LoadBalancer.SecurityGroups'
Parameters:
  BucketName:
    AllowedPattern: '[-\.a-z0-9]*'
    Default: ''
    Description: Name of the log bucket, the bucket should have proper bucket policy
      to enable log delivery, set to empty string disables logging.
    Type: String
  CertificateArn:
    Default: ''
    Description: ARN of IAM or ACM certificate to bind to LB, set to emptystring disables
      https.
    Type: String
  InstanceId:
    Description: Name of the ec2 instance as target
    Type: AWS::EC2::Instance::Id
  LbScheme:
    AllowedValues:
      - internet-facing
      - internal
    Default: internet-facing
    Description: Specifies whether the load balancer is internal or Internet-facing
    Type: String
  LogPrefix:
    Default: ''
    Description: Access log prefix (optional)
    MaxLength: 128
    MinLength: 0
    Type: String
  SecurityGroupId:
    Description: Security group to assign to the load balancer.
    Type: AWS::EC2::SecurityGroup::Id
  SubnetIds:
    Description: SubnetIds of an existing subnets in the VPC.
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VpcId of an existing VPC.
    Type: AWS::EC2::VPC::Id
Resources:
  HttpListener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  HttpsListener:
    Properties:
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: '443'
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: access_logs.s3.enabled
          Value: !If
            - EnableAccessLogsCondition
            - 'true'
            - 'false'
        - !If
          - EnableAccessLogsCondition
          - Key: access_logs.s3.bucket
            Value: !Ref 'BucketName'
          - !Ref 'AWS::NoValue'
        - !If
          - EnableAccessLogsCondition
          - Key: access_logs.s3.prefix
            Value: !Ref 'LogPrefix'
          - !Ref 'AWS::NoValue'
      Scheme: !Ref 'LbScheme'
      SecurityGroups:
        - !Ref 'SecurityGroupId'
      Subnets: !Ref 'SubnetIds'
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  TargetGroup:
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: '15'
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '5'
      HealthyThresholdCount: '3'
      Matcher:
        HttpCode: '200'
      Port: '80'
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Targets:
        - Id: !Ref 'InstanceId'
          Port: '80'
      UnhealthyThresholdCount: '5'
      VpcId: !Ref 'VpcId'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
