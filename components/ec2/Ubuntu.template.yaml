AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  AllocateElasticIpCondition: !Equals [!Ref 'AllocateElasticIp', 'true']
  ChinaRegionCondition: !Equals [!Ref 'AWS::Region', cn-north-1]
  CreateInstanceProfileCondition: !Equals [!Ref 'InstanceProfileArn', '']
  CreateSecurityGroupCondition: !Equals [!Ref 'InstanceSecurityGroupId', '']
  DefaultEbsOptimizationCondition: !Equals [!Ref 'EbsOptimized', default]
  PublicIpCondition: !Or [!Equals [!Ref 'AssociatePublicIp', 'true'], !Equals [!Ref 'AllocateElasticIp',
      'true']]
  Volume1Condition: !Not [!Equals [!Ref 'Volume1Size', '0']]
  Volume1IopsOptimizedCondition: !Equals [!Ref 'Volume1Type', io1]
  VolumeEncryptedCondition: !Not [!Equals [!Ref 'VolumeEncryptionKey', '']]
Description: Amazon EC2 instance running the Ubuntu Linux.
Mappings:
  UbuntuAMIs:
    ap-northeast-1:
      artful: ami-6f3be109
      trusty: ami-3b60bc5d
      xenial: ami-6959870f
    ap-northeast-2:
      artful: ami-a16dc8cf
      xenial: ami-08d77266
    ap-south-1:
      artful: ami-fe0c4e91
      xenial: ami-50591a3f
    ap-southeast-1:
      artful: ami-9aa4e0f9
      trusty: ami-6194ec02
      xenial: ami-d9dca7ba
    ap-southeast-2:
      artful: ami-1dad417f
      trusty: ami-6c27c50e
      xenial: ami-02ad4060
    ca-central-1:
      artful: ami-cfba02ab
      xenial: ami-13e45c77
    eu-central-1:
      artful: ami-b058e1df
      trusty: ami-c9d966a6
      xenial: ami-e613ac89
    eu-west-1:
      artful: ami-cc67b9b5
      trusty: ami-d429faad
      xenial: ami-eed00d97
    eu-west-2:
      artful: ami-163c2172
      xenial: ami-ba5f42de
    sa-east-1:
      artful: ami-f86a1394
      trusty: ami-356e1059
      xenial: ami-1ca7d970
    us-east-1:
      artful: ami-36a8754c
      trusty: ami-6e29e714
      xenial: ami-bcdc16c6
    us-east-2:
      artful: ami-03e9c566
      xenial: ami-49426e2c
    us-west-1:
      artful: ami-5a4a773a
      trusty: ami-e1784a81
      xenial: ami-1b17257b
    us-west-2:
      artful: ami-48ce0c30
      trusty: ami-6aa26412
      xenial: ami-19e92861
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - SubnetId
          - AllocateElasticIp
          - AssociatePublicIp
      - Label:
          default: Instance Configuration
        Parameters:
          - KeyName
          - UbuntuVersion
          - InstanceType
          - DetailedMonitoring
          - InstanceSecurityGroupId
          - InstanceProfileArn
      - Label:
          default: EBS Volume Configuration
        Parameters:
          - EbsOptimized
          - Volume1Size
          - Volume1Type
          - Volume1Iops
          - Volume1Device
          - VolumeEncryptionKey
      - Label:
          default: Security & Log Configuration
        Parameters:
          - SshLocation
          - LogGroupName
    ParameterLabels:
      AllocateElasticIp:
        default: Allocate Elastic Ip
      AssociatePublicIp:
        default: Associate Public Ip
      DetailedMonitoring:
        default: Detailed Monitoring
      EbsOptimized:
        default: Ebs Optimized
      InstanceProfileArn:
        default: Instance Profile Arn
      InstanceSecurityGroupId:
        default: Instance Security Group Id
      InstanceType:
        default: Instance Type
      KeyName:
        default: Key Name
      LogGroupName:
        default: Log Group Name
      SshLocation:
        default: Ssh Location
      SubnetId:
        default: Subnet Id
      UbuntuVersion:
        default: Ubuntu Version
      Volume1Device:
        default: Volume1 Device
      Volume1Iops:
        default: Volume1 Iops
      Volume1Size:
        default: Volume1 Size
      Volume1Type:
        default: Volume1 Type
      VolumeEncryptionKey:
        default: Volume Encryption Key
      VpcId:
        default: Vpc Id
Outputs:
  InstanceId:
    Description: EC2 Instance Id
    Value: !Ref 'UbuntuInstance'
  PrivateIp:
    Description: Instance private IP address
    Value: !GetAtt 'UbuntuInstance.PrivateIp'
  PublicIp:
    Condition: PublicIpCondition
    Description: Public IP address
    Value: !GetAtt 'UbuntuInstance.PublicIp'
  Volume1Id:
    Condition: Volume1Condition
    Description: Volume 1 Id
    Value: !Ref 'Volume1'
Parameters:
  AllocateElasticIp:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Allocate a ElaticIP and assoicate it to instance
    Type: String
  AssociatePublicIp:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Assoicate a public IP to instance, default means use subnet default
      setting, otherwise SSM and CloudwatchLogs won't initalize properly
    Type: String
  DetailedMonitoring:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Whether uses detailed 1 minute monitoring interval, which requires
      additional charge
    Type: String
  EbsOptimized:
    AllowedValues:
      - default
      - 'true'
      - 'false'
    Default: default
    Description: Whether instance is EBS optimized, default means use default value
      of selected instance type
    Type: String
  InstanceProfileArn:
    Default: ''
    Description: Arn of instance profile, a new instance role and instance profile
      will be created if this is left empty.
    Type: String
  InstanceSecurityGroupId:
    Default: ''
    Description: Instance security group id, a new security group will be created
      this is left empty.
    Type: String
  InstanceType:
    AllowedValues:
      - c1.medium
      - c1.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c3.large
      - c3.xlarge
      - c4.16xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c4.large
      - c4.xlarge
      - c5.18xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.large
      - c5.xlarge
      - cc2.8xlarge
      - cr1.8xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - d2.xlarge
      - g2.2xlarge
      - g2.8xlarge
      - g3.16xlarge
      - g3.4xlarge
      - g3.8xlarge
      - h1.16xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i2.xlarge
      - i3.16xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.large
      - i3.xlarge
      - m1.large
      - m1.medium
      - m1.small
      - m1.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m2.xlarge
      - m3.2xlarge
      - m3.large
      - m3.medium
      - m3.xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.large
      - m4.xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.large
      - m5.xlarge
      - p2.16xlarge
      - p2.8xlarge
      - p2.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r3.large
      - r3.xlarge
      - r4.16xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.large
      - r4.xlarge
      - t1.micro
      - t2.2xlarge
      - t2.large
      - t2.medium
      - t2.micro
      - t2.nano
      - t2.small
      - t2.xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.32xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
  LogGroupName:
    AllowedPattern: '[a-zA-Z0-9_\-/]*'
    ConstraintDescription: 'log group must contain only following characters: a-zA-Z0-9_-/.'
    Description: CloudWatch Logs LogGroup name for the aws log agent to write to,
      the LogGroup is assumed to be in the same region as the stack, and will be created
      if it does not exist.
    MaxLength: '512'
    MinLength: '1'
    Type: String
  SshLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: Lockdown SSH access to the EC2 instance (default can be accessed
      from anywhere)
    MaxLength: '18'
    MinLength: '9'
    Type: String
  SubnetId:
    ConstraintDescription: must be an existing subnet id.
    Description: SubnetId of an existing subnet in the VPC
    Type: AWS::EC2::Subnet::Id
  UbuntuVersion:
    AllowedValues:
      - artful
      - xenial
      - trusty
    Default: xenial
    Description: Ubuntu version (only LTS are allowed)
    Type: String
  Volume1Device:
    AllowedValues:
      - /dev/xvdf
      - /dev/xvdg
      - /dev/xvdh
      - /dev/xvdi
      - /dev/xvdj
      - /dev/xvdk
      - /dev/xvdl
      - /dev/xvdm
      - /dev/xvdn
      - /dev/xvdo
      - /dev/xvdp
    Default: /dev/xvdf
    Description: Volume device name
    Type: String
  Volume1Iops:
    ConstraintDescription: Range is 100 to 20000 for Provisioned IOPS SSD volumes,
      with a maximum ratio of 50 IOPS/GiB
    Default: '100'
    Description: IOPS the volume supports, used when the volume type is io1
    MaxValue: '20000'
    MinValue: '100'
    Type: Number
  Volume1Size:
    ConstraintDescription: 1-16384 for gp2, 4-16384 for io1, 500-16384 for st1,500-16384
      for sc1, and 1-1024 for standard
    Default: '0'
    Description: Size of the EBS volume in GB, "0" disables volume creation
    MaxValue: '16384'
    MinValue: '0'
    Type: Number
  Volume1Type:
    AllowedValues:
      - gp2
      - io1
      - st1
      - sc1
      - standard
    Default: gp2
    Description: EBS volume type
    Type: String
  VolumeEncryptionKey:
    Default: ''
    Description: KMS key arn of the volume for data encryption, leave blank means
      don't use volume SSE, please note previous generation instances and t2.* instances
      don't suport encrypted volumes
    Type: String
  VpcId:
    ConstraintDescription: must be an existing vpc id.
    Description: VpcId of an existing VPC
    Type: AWS::EC2::VPC::Id
Resources:
  EIPAssociation:
    Condition: AllocateElasticIpCondition
    Properties:
      AllocationId: !GetAtt 'ElasticIP.AllocationId'
      InstanceId: !Ref 'UbuntuInstance'
    Type: AWS::EC2::EIPAssociation
  ElasticIP:
    Condition: AllocateElasticIpCondition
    DependsOn: UbuntuInstance
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  InstanceProfile:
    Properties:
      Roles:
        - !Ref 'InstanceRole'
    Type: AWS::IAM::InstanceProfile
  InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !If [ChinaRegionCondition, ec2.amazonaws.com.cn, ec2.amazonaws.com]
      ManagedPolicyArns: []
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Effect: Allow
                Resource:
                  - !Sub ['arn:${PARTITION}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*',
                    {PARTITION: !If [ChinaRegionCondition, aws-cn, aws]}]
            Version: '2012-10-17'
          PolicyName: AWSLogs
    Type: AWS::IAM::Role
  SshSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: !Ref 'SshLocation'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      VpcId: !Ref 'VpcId'
    Type: AWS::EC2::SecurityGroup
  UbuntuInstance:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        ConfigCFNTools:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub '[main]

                stack=${AWS::StackId}

                region=${AWS::Region}

                interval=5

                verbose=false

                '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub '[cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.UbuntuInstance.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init -v    --stack ${AWS::StackName}    --resource
                UbuntuInstance    --configsets Update    --region ${AWS::Region}

                runas=root

                '
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallAWSTools:
          commands:
            01_download_awslogs:
              command: wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              cwd: /tmp
            02_install_awslogs:
              command: !Sub 'python awslogs-agent-setup.py -n -r ${AWS::Region} -c
                /tmp/awslogs.conf'
              cwd: /tmp
            03_enable_awslogs:
              command: systemctl enable awslogs.service
              test: test $(lsb_release -cs) = "xenial"
            04_start_awslogs:
              command: systemctl start awslogs.service
              test: test $(lsb_release -cs) = "xenial"
          files:
            /home/ubuntu/.aws/config:
              content: !Sub "[default]\ns3 =\n    signature_version = s3v4\nregion\
                \ = ${AWS::Region}\n"
              group: ubuntu
              owner: ubuntu
            /tmp/awslogs.conf:
              content: !Sub ["[general]\nstate_file= /var/awslogs/agent-state\n[/var/log/syslog]\n\
                  datetime_format = %b %d %H:%M:%S\nfile = /var/log/syslog\nbuffer_duration\
                  \ = 5000\ninitial_position = start_of_file\nlog_group_name = ${LOG_GROUP_NAME}\n\
                  log_stream_name = ${AWS::StackName}/{instance_id}/syslog\n", {LOG_GROUP_NAME: !Ref 'LogGroupName'}]
              group: root
              mode: '000400'
              owner: root
          packages:
            apt:
              python-pip: []
            python:
              awscli: []
        InstallPackages: {}
        configSets:
          Bootstrap:
            - ConfigCFNTools
            - InstallAWSTools
            - InstallPackages
          Update:
            - ConfigCFNTools
            - InstallPackages
    Properties:
      EbsOptimized: !If [DefaultEbsOptimizationCondition, !Ref 'AWS::NoValue', !Ref 'EbsOptimized']
      IamInstanceProfile: !If [CreateInstanceProfileCondition, !Ref 'InstanceProfile',
        !Ref 'InstanceProfileArn']
      ImageId: !FindInMap [UbuntuAMIs, !Ref 'AWS::Region', !Ref 'UbuntuVersion']
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      Monitoring: !Ref 'DetailedMonitoring'
      NetworkInterfaces:
        - AssociatePublicIpAddress: !Ref 'AssociatePublicIp'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !If [CreateSecurityGroupCondition, !Ref 'SshSecurityGroup', !Ref 'InstanceSecurityGroupId']
          SubnetId: !Ref 'SubnetId'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData: !Base64
        Fn::Sub: "#!/bin/bash -xe\nsudo apt-get -yq update\nsudo apt-get -yq install\
          \ python-setuptools python-pip\n\n# Install cfn-tools\nsudo pip install\
          \ https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n\
          sudo cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup\nsudo chmod +x\
          \ /etc/init.d/cfn-hup\nsudo update-rc.d cfn-hup defaults\n\n# Run cfn-init\n\
          cfn-init -v --stack ${AWS::StackName} --resource UbuntuInstance --configsets\
          \ Bootstrap --region ${AWS::Region}\ncfn-signal -e $? --stack ${AWS::StackName}\
          \ --resource UbuntuInstance --region ${AWS::Region}\n\n# Install Simple\
          \ System Manager\n# cd /tmp\n# sudo curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/debian_amd64/amazon-ssm-agent.deb\
          \ -o amazon-ssm-agent.deb\n# sudo dpkg -i amazon-ssm-agent.deb\n# sudo start\
          \ amazon-ssm-agent\n\n"
    Type: AWS::EC2::Instance
  Volume1:
    Condition: Volume1Condition
    Properties:
      AvailabilityZone: !GetAtt 'UbuntuInstance.AvailabilityZone'
      Encrypted: !If [VolumeEncryptedCondition, 'true', 'false']
      Iops: !If [Volume1IopsOptimizedCondition, !Ref 'Volume1Iops', !Ref 'AWS::NoValue']
      KmsKeyId: !If [VolumeEncryptedCondition, !Ref 'VolumeEncryptionKey', !Ref 'AWS::NoValue']
      Size: !Ref 'Volume1Size'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VolumeType: !Ref 'Volume1Type'
    Type: AWS::EC2::Volume
  Volume1Attachment:
    Condition: Volume1Condition
    Properties:
      Device: !Ref 'Volume1Device'
      InstanceId: !Ref 'UbuntuInstance'
      VolumeId: !Ref 'Volume1'
    Type: AWS::EC2::VolumeAttachment
